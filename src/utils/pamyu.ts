import {invoke} from '@tauri-apps/api/tauri';

import {useCharacterStore} from '../stores/characterStore.ts';
import {useScenesStore} from '../stores/scenesStore.ts';

import {Character} from '../types/character.ts';
import {Action, RawAction} from '../types/scene.ts';

import {path} from '../main';

import {getIndent} from './tools.ts';

const warnMessage = `# ${'='.repeat(85)}
# This file is generated automatically with Pamyu. Do not edit this file manually.
# ${'='.repeat(85)}\n\n`;

function getOptions(character: Character): string {
    let options = '';
    const optionsKeys: (keyof Character)[] = ['color', 'what_prefix', 'what_suffix', 'who_prefix', 'who_suffix'];
    optionsKeys.forEach((key: keyof Character) => {
        if (character[key]) options += `, ${key}="${character[key]}"`;
    });
    return options;
}

export function getCharactersScript(): string {
    const charactersStrings: string[] = [];

    useCharacterStore().getCharacters.forEach((character) => {
        const options = getOptions(character);
        const characterString = `define ${character._id} = Character("${character.name}"${options})`;
        charactersStrings.push(characterString);
    });
    return warnMessage + charactersStrings.join('\n');
}

export function updateScenesScipts(): void {
    console.log('ðŸ“‚ Updating scenes scripts');

    useScenesStore().getScenes.forEach((scene) => {
        let sceneString = `${warnMessage}label ${scene._id}:\n`;
        const indent = getIndent(1);
        const actionsLines = getActionsLines(useScenesStore().getAllActionsOfScene(scene._id));
        sceneString += indent + actionsLines.join(`\n${indent}`);

        invoke('update_script', {
            path,
            file: 'scenes/' + scene._id + '.rpy',
            data: sceneString
        }).catch((e) => console.error(e));
    });
}

function getActionsLines(actions: Action[]): string[] {
    const actionsLines: string[] = [];

    actions.forEach((action) =>
        actionsLines.push(...getActionLines(action)));

    return actionsLines;
}

function getActionLines(action: Action): string[] {
    const lines: string[] = [];

    switch (action.type) {
        case 'raw':
            lines.push(...getRawActionLines(action));
            break;
    }

    return lines;
}

function getRawActionLines(action: RawAction): string[] {
    const lines: string[] = [];

    lines.push(...action.code.split('\n'));

    return lines;
}
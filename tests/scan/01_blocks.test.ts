import {describe, expect, test} from 'vitest';

import {Block} from '../../src/types/script';

import {ScanManager} from '../../src/classes/ScanManager';

type Example = {
    script: string;
    blocks: Block;
    cleanBlocks: Block;
};


const EXAMPLES: Example[] = [];

EXAMPLES.push({
    script: `
# Étiquette de discussion
label discussion:
    m "Il y a quelque chose que je veux te dire."
    show mary angry
    e "Qu'est-ce qui se passe ?"
    
    menu:
        "Choisissez une option :"

        "Rassurer Mary":
            e "Ne t'inquiète pas, tout va bien se passer."
            jump reassurance
            
        "Demander plus d'informations":
            e "Peux-tu m'en dire plus ?"
            jump more_info
`,
    blocks: [
        '# Étiquette de discussion',
        'label discussion:',
        [
            'm "Il y a quelque chose que je veux te dire."',
            'show mary angry',
            'e "Qu\'est-ce qui se passe ?"',
            '',
            'menu:',
            [
                '"Choisissez une option :"',
                '',
                '"Rassurer Mary":',
                [
                    'e "Ne t\'inquiète pas, tout va bien se passer."',
                    'jump reassurance'
                ],
                '"Demander plus d\'informations":',
                [
                    'e "Peux-tu m\'en dire plus ?"',
                    'jump more_info'
                ]
            ]
        ]
    ],
    cleanBlocks: [
        'label discussion:',
        [
            'm "Il y a quelque chose que je veux te dire."',
            'show mary angry',
            'e "Qu\'est-ce qui se passe ?"',
            'menu:',
            [
                '"Choisissez une option :"',
                '"Rassurer Mary":',
                [
                    'e "Ne t\'inquiète pas, tout va bien se passer."',
                    'jump reassurance'
                ],
                '"Demander plus d\'informations":',
                [
                    'e "Peux-tu m\'en dire plus ?"',
                    'jump more_info'
                ]
            ]
        ]
    ]
});

EXAMPLES.push({
    script: `# Étiquette de rassurance
label reassurance:
    m "Merci, ça me rassure."
    return`,
    blocks: [
        '# Étiquette de rassurance',
        'label reassurance:',
        [
            'm "Merci, ça me rassure."',
            'return'
        ]
    ],
    cleanBlocks: [
        'label reassurance:',
        [
            'm "Merci, ça me rassure."',
            'return'
        ]
    ]
});

EXAMPLES.push({
    script: `# Étiquette d'informations supplémentaires
label more_info:
    m "C'est une longue histoire..."
    return`,
    blocks: [
        '# Étiquette d\'informations supplémentaires',
        'label more_info:',
        [
            'm "C\'est une longue histoire..."',
            'return'
        ]
    ],
    cleanBlocks: [
        'label more_info:',
        [
            'm "C\'est une longue histoire..."',
            'return'
        ]
    ]
});

EXAMPLES.push({
    script: `# =====================================================================================
# This file is generated automatically with Pamyu. Do not edit this file manually.
# =====================================================================================

define lucy_7WlgGNUf = Character("Lucy", color="#e42fde")
define lucy_StHlZiPX = Character("Lucy", color="#e42fde", who_prefix="( ", who_suffix=" )")
define bob_0La2Jcgl = Character("Bob", color="#ffffff")
define oui_5qe5buYK = Character("Oui", color="#ffffff")
define hellokitty_Q0tmRGlU = Character("Hello kitty", color="#d312cd")`,
    blocks: [
        '# =====================================================================================',
        '# This file is generated automatically with Pamyu. Do not edit this file manually.',
        '# =====================================================================================',
        '',
        'define lucy_7WlgGNUf = Character("Lucy", color="#e42fde")',
        'define lucy_StHlZiPX = Character("Lucy", color="#e42fde", who_prefix="( ", who_suffix=" )")',
        'define bob_0La2Jcgl = Character("Bob", color="#ffffff")',
        'define oui_5qe5buYK = Character("Oui", color="#ffffff")',
        'define hellokitty_Q0tmRGlU = Character("Hello kitty", color="#d312cd")'
    ],
    cleanBlocks: [
        'define lucy_7WlgGNUf = Character("Lucy", color="#e42fde")',
        'define lucy_StHlZiPX = Character("Lucy", color="#e42fde", who_prefix="( ", who_suffix=" )")',
        'define bob_0La2Jcgl = Character("Bob", color="#ffffff")',
        'define oui_5qe5buYK = Character("Oui", color="#ffffff")',
        'define hellokitty_Q0tmRGlU = Character("Hello kitty", color="#d312cd")'
    ]
});

EXAMPLES.push({
    script: `# Définition des personnages
define e = Character('Eileen', color="#c8ffc8")
define m = Character('Mary', color="#c8c8ff")

# Définition des images
image bg salle = "images/salle.png"
image eileen happy = "images/eileen_happy.png"
image eileen sad = "images/eileen_sad.png"
image mary angry = "images/mary_angry.png"

# Étiquette de démarrage
label start:
    # Affichage de l'arrière-plan
    scene bg salle
    
    # Dialogue
    e "Salut Mary, comment ça va ?"
    m "Je vais bien, merci !"
    
    # Affichage d'une image
    show eileen happy
    e "Je suis contente de l'entendre !"
    
    # Transition vers une autre étiquette
    jump discussion`,
    blocks: [
        '# Définition des personnages',
        'define e = Character(\'Eileen\', color="#c8ffc8")',
        'define m = Character(\'Mary\', color="#c8c8ff")',
        '',
        '# Définition des images',
        'image bg salle = "images/salle.png"',
        'image eileen happy = "images/eileen_happy.png"',
        'image eileen sad = "images/eileen_sad.png"',
        'image mary angry = "images/mary_angry.png"',
        '',
        '# Étiquette de démarrage',
        'label start:',
        [
            '# Affichage de l\'arrière-plan',
            'scene bg salle',
            '',
            '# Dialogue',
            'e "Salut Mary, comment ça va ?"',
            'm "Je vais bien, merci !"',
            '',
            '# Affichage d\'une image',
            'show eileen happy',
            'e "Je suis contente de l\'entendre !"',
            '',
            '# Transition vers une autre étiquette',
            'jump discussion'
        ]
    ],
    cleanBlocks: [
        'define e = Character(\'Eileen\', color="#c8ffc8")',
        'define m = Character(\'Mary\', color="#c8c8ff")',
        'image bg salle = "images/salle.png"',
        'image eileen happy = "images/eileen_happy.png"',
        'image eileen sad = "images/eileen_sad.png"',
        'image mary angry = "images/mary_angry.png"',
        'label start:',
        [
            'scene bg salle',
            'e "Salut Mary, comment ça va ?"',
            'm "Je vais bien, merci !"',
            'show eileen happy',
            'e "Je suis contente de l\'entendre !"',
            'jump discussion'
        ]
    ]
});

EXAMPLES.push({
    script: `# Étiquette de test
label test_label_6:
    e "Ceci est un test"
    m """
Ceci est un test multiligne



Et même sur plusieurs lignes
    Avec des espaces
        Et des indentations
    Un peu partout
    """
    
    return`,
    blocks: [
        '# Étiquette de test',
        'label test_label_6:',
        [
            'e "Ceci est un test"',
            'm """',
            'Ceci est un test multiligne',
            '',
            '',
            '',
            'Et même sur plusieurs lignes',
            'Avec des espaces',
            'Et des indentations',
            'Un peu partout',
            '"""',
            '',
            'return'
        ]
    ],
    cleanBlocks: [
        'label test_label_6:',
        [
            'e "Ceci est un test"',
            'm """',
            'Ceci est un test multiligne',
            '',
            'Et même sur plusieurs lignes',
            'Avec des espaces',
            'Et des indentations',
            'Un peu partout',
            '"""',
            'return'
        ]
    ]
});

describe('Sould give simple blocks', () => {
    EXAMPLES.forEach((example, index) => {
        test(`Example ${index + 1}`, () => {
            expect(ScanManager.i.getBlocks(example.script)).toEqual(example.blocks);
        });
    });
});

describe('Sould give clean blocks', () => {
    EXAMPLES.forEach((example, index) => {
        test(`Example ${index + 1}`, () => {
            expect(ScanManager.i.getCleanBlocks(example.script)).toEqual(example.cleanBlocks);
        });
    });
});